services:
  db:
    image: postgres:16
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 3s
      timeout: 3s
      retries: 3

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 2s
      timeout: 3s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - .:/app:rw
    environment:
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      LESSON_CACHE_TTL: ${LESSON_CACHE_TTL}
      COMPLETION_CACHE_TTL: ${COMPLETION_CACHE_TTL}
      COOKIE_SECURE: ${COOKIE_SECURE}
    command: >
      sh -c "
        echo '⏳ Waiting for PostgreSQL…';
        while ! pg_isready -h db -U $${POSTGRES_USER} -d $${POSTGRES_DB}; do sleep 1; done;
        echo '🛠 Running migrations…';
        alembic upgrade head;
        echo '🚀 Starting development server…';
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

volumes:
  postgres_data:
